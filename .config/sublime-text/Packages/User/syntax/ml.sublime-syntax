%YAML 1.2
name: ML
file_extensions: [ml,pml,paper]
scope: source.ml
variables:
  op: '[!$%&*+\-./:<=>?@^|~]+'
  resv: '\b(?:case|\||->|let|rec|and|in|--|where|if|then|else|fn|raise|handle|datatype|infixl|infixr|::|true|false|with|forall|!)\b'
  id: "(?!\b{{resv}}\b)(?:[a-zA-Z0-9_][a-zA-Z0-9_'?]*)"
  cap: "[A-Z][a-zA-Z0-9_'?]*"
contexts:
  main:
    - include: space
    - include: strings

    - match:  '\b(datatype|with) ({{id}})'
      captures:
        1:  keyword.ml
        2:  entity.name.type.ml


    - match:  '\b(forall) ((?:{{id}}| )*)'
      captures:
        1:  keyword.ml
        2:  meta.function.parameters.ml


    # When let or rec are on a line of their own.
    - match:  '\blet(?: rec)?\n'
      scope:  keyword.ml

    - match: '\b(let(?: rec)?|and|where(?: rec)?) ((?!fn\b){{id}})'
      captures:
        1:    keyword.ml
        2:    entity.name.function.ml
      push:   let

    - match: '\bfn\b'
      scope:  keyword.ml
      push:   fn

    - match:  '\bhandle\b'
      scope:  keyword.ml
      push:   params

    - match:  '\|'
      scope:  keyword.ml
      push:   params

    - match:  '\bref\b|!|:='
      scope:  keyword.ml

    - match:  '{{resv}}'
      scope:  keyword.ml

    - match:  '[()\[\]\{\}.,;]'
      scope:  punctuation.ml

    - match:  '{{cap}}'
      scope:  constant.constructor.ml

    - match:  '{{id}}'
      scope:  variable.ml

    - match:  '{{op}}'
      scope:  keyword.operator.ml

    - match:  '`{{id}}'
      scope:  keyword.ml

  string:
    - meta_scope: string.ml
    - match: '\\.'
    - match: '"'
      pop: true

  character:
    - meta_scope: constant.character.ml
    - match: '\\.'
    - match: "'"
      pop: true

  fn:
    - meta_scope: meta.function.ml
    - match: ''
      push: params

  let:
    - meta_scope: meta.function.ml
    - match: ' .*::'
      pop: true
    - match: ''
      push: params

  typing:
    - meta_scope: meta.function.type.ml
    - match: '='
      set: params

  params:
    - meta_scope: meta.function.ml
    - include: strings

    - match: '=|->|\|'
      scope: keyword.ml
      pop:  2

    - match:  '{'
      scope:  punctuation.ml
      push:   record_params

    - match: '\n'
      pop: 2

    - match: "{{cap}}"
      scope:  constant.constructor.ml

    - match: '({{id}})|({{op}})'
      scope: meta.function.parameters.ml

    - include: space
    - match: '.'

  record_params:
    - match:  '({{id}}) *(=)'
      captures:
        1: meta.function.parameters.ml
        2: punctuation.ml
    - include: params

  case_params:
    - match:  '\n'
      pop:    2
    - include: params

  space:
    - match: '\s+'
    - match: '#.*'
      scope: comment.ml

  strings:
    - match: '"'
      scope: string.ml
      push: string
    - match: "'"
      scope: constant.character.ml
      push: character
